import PropTypes from 'prop-types';
import React from 'react';
import { LayerGroup } from 'react-leaflet';
import { useSelector } from 'react-redux';

import { TickIcon } from '../assets';
// import { useGame } from '../../context';
import MapMarker from './marker';
import MapDraftMarker from './marker-draft';
import MapEditableMarker from './marker-editable';
import useMarkers from './use-markers';

const MarkersLayerComponent = React.memo(({ readOnly }) => {
  const done = useSelector(_ => _.done);
  const draft = useSelector(_ => _.draft);
  const filters = useSelector(_ => _.filters);
  // const navigation = useSelector(_ => _.navigation);

  // const { icons } = useGame();
  const { markers } = useMarkers();

  // useMapEvent('click', ({ latlng }) => {
  //   if (readOnly) {
  //     onChange('createDraft', latlng);
  //   } else if (navigation) {
  //     onChange('toggleNavigation', null);
  //   }
  // });

  return (
    <LayerGroup>
      {draft && <MapDraftMarker data={draft} />}
      {readOnly &&
        markers.map(obj => {
          try {
            const Icon = TickIcon;
            // const { Icon, color } = icons[obj.category];
            return (
              <MapEditableMarker
                key={obj.id}
                background="#FFFFFF"
                data={obj}
                Icon={Icon}
              />
            );
          } catch (err) {
            // @TODO send err to fatality/sentry service
            // console.log('obj', obj);
            return null;
          }
        })}
      {!readOnly &&
        markers
          .filter(obj => !!obj.region)
          .filter(obj => {
            const ishidden = filters.includes(obj.category);
            return !ishidden;
          })
          .filter(obj => {
            const isdone = done.includes(obj.id);
            const hidecompleted = filters.includes('completed') && isdone;
            return !hidecompleted;
          })
          .map(obj => {
            const Icon = TickIcon;
            // const { Icon, collectible, color } = icons[obj.category];
            const isdone = done.includes(obj.id);
            return (
              <MapMarker
                key={obj.id}
                background="#FFFFFF"
                collectible={false}
                completed={isdone}
                data={obj}
                Icon={Icon}
              />
            );
          })}
    </LayerGroup>
  );
});

MarkersLayerComponent.propTypes = {
  readOnly: PropTypes.bool.isRequired,
};

MarkersLayerComponent.displayName = 'MarkersLayerComponent';

export default MarkersLayerComponent;
